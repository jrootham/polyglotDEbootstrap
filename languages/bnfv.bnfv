#  Bootstrap bnfv 

language := *<line> => 
	('syntax = require "static"') 
	('stack = []')
	<language> 
	write filename '.coffee'
	;

line := <definition> | <comment> | <blank> => <line>;

blank := {} <possible_space> "\n";

# <string> is a true builtin, not defined in this file
comment := {} <possible_space> "#" <string> "\n" 

trailing_comment := {c50} <possible_space> "#" <string> "\n";

definition := (<def> {n} <possible_space>) | <def_comment> => <definition>;
def_comment := <def> <trailing_comment> => <def>;
def := (<syntax> | <syntax_parse> | <syntax_generate> | <syntax_both>) ";" => <def>;

syntax := {} <possible_space> <name> {s} <possible_space> ":=" {s} <possible_space> <def_expression> ^ (;

syntax_parse := <syntax> <parse>;
syntax_generate := <syntax> <generate>;
syntax_both := <syntax> <parse> <generate>;

parse := {sw} "^" {s} <possible_space> * <parse_statement>;
generate := {sw} "=>" {s} <possible_space> * <generate_statement>;

# syntax definition part

def_expression := <expression> | <left_expression> | <right_expression> | <both_expression>;

left_expression := "e" [s] <required_space> <expression>;		# extendible to the left
right_expression := <expression> <required_space> [s] "e";		# extendible to the right
both_expression := "e" [s] <required_space> <expression> <required_space> [s] "e";	# extendible both ways

expression := <or_expression> | <or_term>;
or_expression := <expression> {s} <possible_space> "|" {s} <possible_space> <or_term>;
or_term := <and_expression> | <primary>

and_expression := <expression> [s] <required_space> <primary>;
primary := <repeat_expression> | <base_expression>

repeat_expression := "*" ({} <base_expression>);

base_expression := <name_expression> | <constant_expression> | <builtin> | <paren_expression>;
name_expression := "<" <name> ">";
name := symbol global;
paren_expression := "(" {} <possible_space> <expression> {} <possible_space> ")";
constant_expression := <quoted_string>;	# <quoted_string> is a true builtin not defined in this file

# whitespace definitions

possible_space := <optional_space> | "";
optional_space := "{" <white> "}";
required_space := "[" <white> "]";

white := <space> | <tab> | <newline> | <carriage_return> | <indent> | <increase_indent> | <decrease_indent> | <column> | <wrap_preference>;

space := "s";
tab := "t";
newline := "n";
carriage_return := "r";
indent := "i";
increase_indent := "+";
decrease_indent := "-";
column := "c" <column_spec>;
column_spec := unsigned;		# builtin
wrap_preference := "w";

# builtins

builtin := <unsigned> | <integer> | <fixed> | <float> | <fixed_bcd> | <symbol>;

unsigned := "unsigned" <bits>;
integer := "integer" <bits>;
fixed := "fixed" <float_bits>;
float := "float" <float_bits>;
fixed_bcd := "fixed_bcd" <fixed_digits>;
symbol := "symbol" <scope> <namespace> <symbol_regex>;
match := "match" <regex>

bits := <bit_count> | "";
bit_count := <number>;

number := match "/[0-9]*/";

float_bits := <bit_count> <exponent_bit_count> | "";
exponent_bit_count := <number>;

fixed_digits := <total_digits> <fraction_digits> | "";
total_digits := <number>;
fraction_digits := <number> | "";

regex := "/" <string> "/";		#  Special case builtin

scope := "global";

namespace := "";

symbol_regex := <regex> | "";

# Parse time actions

parse_statement := {} "(" {} <parse_action> {} ")" {w};

parse_action := <insert> | <is_inserted> | <is_type> | <type_equals> | <make_type> | <set> | <is_set>;

insert := "insert" [s] <item>;
is_inserted := <item> [s] "is_inserted";
is_type := <item> [s] "is_type" [s] <type>;
type_equals := <left_item> [s] "type_equals" [s] <right_item>;
make_type := "make_type" [s] <type>;
set := <item> [s] "set" [s] <value>;
is_set := "is_set" [s] <item>;

item := <local_name> | """" <name> """"";
# local_name must be a name used in the current production
local_name := local_name;

<type> := <name>;
<left_item> := <item>;
<right_item> := <item>;
<value> := <string>;   #  This is not complete

#  Code generation

generate_statement := "(" {} <generation> {} ")" | "<" <descend> ">";

descend := <local_name>;
generation := <generate_action> *([s] <generate_action>);
generate_action := <generate_constant> | <generate_dynamic>;
generate_constant := <quoted_string>;
generate_dynamic := <local_name>;

